name: CI/CD Pipeline

# Agregar permisos necesarios
permissions:
  contents: write
  packages: write
  deployments: write

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy'
        required: true
        default: 'latest'

# Valores fijos para el proyecto
env:
  PROJECT_ID: ${{ vars.PROJECT_ID }}
  GKE_CLUSTER: ${{ vars.GKE_CLUSTER }}
  GKE_ZONE: ${{ vars.GKE_ZONE }}
  IMAGE: ${{ vars.IMAGE }}
  REGION: ${{ vars.REGION }}
  DEV_REGISTRY: go-challenge-repo-dev
  PROD_REGISTRY: go-challenge-repo

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.19'
          
      - name: Test
        run: go test -v ./...

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      # Autenticaci√≥n con Google Cloud
      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
          
      # Configurar Docker para usar gcloud como credencial helper
      - name: Configure Docker
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: |
            ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ github.ref == 'refs/heads/main' && env.PROD_REGISTRY || env.DEV_REGISTRY }}/${{ env.IMAGE }}:${{ github.sha }}
            ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ github.ref == 'refs/heads/main' && env.PROD_REGISTRY || env.DEV_REGISTRY }}/${{ env.IMAGE }}:latest

  deploy-dev:
    needs: build
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: DEV
    steps:
      - uses: actions/checkout@v2
      
      - uses: google-github-actions/get-gke-credentials@v0.2.1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          credentials: ${{ secrets.GCP_SA_KEY }}

      - name: Create K8s .env Secret (Dev)
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Secret
          metadata:
            name: api-env-secret
          type: Opaque
          stringData:
            .env: |
              DB_HOST=${{ secrets.DB_HOST }}
              DB_USER=${{ secrets.DB_USERNAME }}
              DB_PASSWORD=${{ secrets.DB_PASSWORD }}
              DB_NAME=${{ secrets.DB_NAME }}
              DB_PORT=${{ secrets.DB_PORT }}
              APP_ENV=development
              PORT=3000
          EOF

      - name: Deploy to Dev
        run: |
          kubectl apply -f .k8s/dev/deployment.yaml
          kubectl apply -f .k8s/dev/service.yaml
          kubectl set image deployment/micasino-api-dev api=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.DEV_REGISTRY }}/${{ env.IMAGE }}:${{ github.sha }}

  deploy-prod:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: PROD
    steps:
      - uses: actions/checkout@v2
      
      - uses: google-github-actions/get-gke-credentials@v0.2.1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          credentials: ${{ secrets.GCP_SA_KEY }}
      - name: Create K8s .env Secret (Prod)
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Secret
          metadata:
            name: api-env-secret
          type: Opaque
          stringData:
            .env: |
              DB_HOST=${{ secrets.DB_HOST }}
              DB_USER=${{ secrets.DB_USERNAME }}
              DB_PASSWORD=${{ secrets.DB_PASSWORD }}
              DB_NAME=${{ secrets.DB_NAME }}
              DB_PORT=${{ secrets.DB_PORT }}
              APP_ENV=production
              PORT=3000
          EOF
      - name: Deploy to Prod
        run: |
          kubectl apply -f .k8s/prod/deployment.yaml
          kubectl apply -f .k8s/prod/service.yaml
          kubectl set image deployment/micasino-api api=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.PROD_REGISTRY }}/${{ env.IMAGE }}:${{ github.sha }}
      - name: Create Release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.${{ github.run_number }}
          release_name: Release v1.${{ github.run_number }}
          body: |
            Deployment to production successful
            - Commit: ${{ github.sha }}
            - Workflow: ${{ github.workflow }}
            - Environment: Production
          draft: false
          prerelease: false
